#!/bin/bash

#~~~ Displaying Disk Space Information | Вывод сведений о дисковом пространстве ~~~~~~~~~~~~~~~~~~~~
function displayingDisk {
MY_DIRECTORIES="/home /var/log"
echo "Top Ten Disk Space Usage"
for DIR in $MY_DIRECTORIES
do
echo "The $DIR Directory:"
du -S $DIR 2>/dev/null |
sort -rn |
sed '{11,$D; =}' |
sed 'N; s/\n/ /' |
awk '{printf $1 ":" "\t" $2 "\t" $3 "\n"}'
done
}
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 E='echo -e';    # -e включить поддержку вывода Escape последовательностей
 e='echo -en';   # -n не выводить перевод строки
 trap "R;exit" 2 # 
    ESC=$( $e "\e")
   TPUT(){ $e "\e[${1};${2}H" ;}
  CLEAR(){ $e "\ec";}
# 25 возможно это 
  CIVIS(){ $e "\e[?25l";}
# это цвет текста списка перед курсором при значении 0 в переменной  UNMARK(){ $e "\e[0m";}
MARK(){ $e "\e[42m";}
# 0 это цвет списка
 UNMARK(){ $e "\e[0m";}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Эти строки задают цвет фона ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  R(){ CLEAR ;stty sane;CLEAR;};                 # в этом варианте фон прозрачный
# R(){ CLEAR ;stty sane;$e "\ec\e[37;44m\e[J";}; # в этом варианте закрашивается весь фон терминала
# R(){ CLEAR ;stty sane;$e "\ec\e[0;45m\e[";};   # в этом варианте закрашивается только фон меню
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 HEAD(){ for (( a=1; a<=33; a++ ))
  do
   TPUT $a 1
        $E "\xE2\x94\x82                                                                            \xE2\x94\x82";
  done
 TPUT 3 2
           $E "$(tput bold)         Справочник директорий Linux $(tput sgr 0)";
 TPUT 5 2
        $E "$(tput setaf 2) Стандартные Kаталоги $(tput sgr 0)";
 TPUT 24 2
        $E "$(tput setaf 2) Информация о дисковом пространстве $(tput sgr 0)";
 TPUT 30 2
        $E "$(tput setaf 2) Up \xE2\x86\x91 \xE2\x86\x93 Down Select Enter                  $(tput sgr 0)";
 MARK;TPUT 1 2
        $E "       Программа написана на bash tput                                      " ;UNMARK;}
   i=0; CLEAR; CIVIS;NULL=/dev/null
# 32 это расстояние сверху и 48 это расстояние слева
   FOOT(){ MARK;TPUT 33 2
        $E "            Grannik | 2021.08.03                                            ";UNMARK;}
# это управляет кнопками ввер/хвниз
 i=0; CLEAR; CIVIS;NULL=/dev/null
#
 ARROW(){ IFS= read -s -n1 key 2>/dev/null >&2
           if [[ $key = $ESC ]];then 
              read -s -n1 key 2>/dev/null >&2;
              if [[ $key = \[ ]]; then
                 read -s -n1 key 2>/dev/null >&2;
                 if [[ $key = A ]]; then echo up;fi
                 if [[ $key = B ]];then echo dn;fi
              fi
           fi
           if [[ "$key" == "$($e \\x0A)" ]];then echo enter;fi;}
 M0(){ TPUT  6 3; $e " /                                                                       ";}
 M1(){ TPUT  7 3; $e " /bin                                                                    ";}
 M2(){ TPUT  8 3; $e " /boot                                                                   ";}
 M3(){ TPUT  9 3; $e " /dev                                                                    ";}
 M4(){ TPUT 10 3; $e " /etc                                                                    ";}
 M5(){ TPUT 11 3; $e " /home                                                                   ";}
 M6(){ TPUT 12 3; $e " /lib                                                                    ";}
 M7(){ TPUT 13 3; $e " /lost+found                                                             ";}
 M8(){ TPUT 14 3; $e " /misc                                                                   ";}
 M9(){ TPUT 15 3; $e " /mnt и /media                                                           ";}
M10(){ TPUT 16 3; $e " /opt                                                                    ";}
M11(){ TPUT 17 3; $e " /proc                                                                   ";}
M12(){ TPUT 18 3; $e " /root                                                                   ";}
M13(){ TPUT 19 3; $e " /run                                                                    ";}
M14(){ TPUT 20 3; $e " /sbin                                                                   ";}
M15(){ TPUT 21 3; $e " /tmp                                                                    ";}
M16(){ TPUT 22 3; $e " /usr                                                                    ";}
M17(){ TPUT 23 3; $e " /var                                                                    ";}
#
M18(){ TPUT 25 3; $e " Oтображает информацию о смонтированных разделах                         ";}
M19(){ TPUT 26 3; $e " Выдаёт список файлов и директорий рекурсивно                            ";}
M20(){ TPUT 27 3; $e " Подсчитывает и выводит размер, занимаемый директорией                   ";}
M21(){ TPUT 28 3; $e " Oтображает размер и имена файлов и директорий, с соритровкой по размеру ";}
M22(){ TPUT 29 3; $e " Вывод сведений о дисковом пространстве                                  ";}
#
M23(){ TPUT 31 3; $e " EXIT                                                                    ";}
# далее идет переменная LM=16 позволяющая бегать по списоку.
LM=23
   MENU(){ for each in $(seq 0 $LM);do M${each};done;}
    POS(){ if [[ $cur == up ]];then ((i--));fi
           if [[ $cur == dn ]];then ((i++));fi
           if [[ $i -lt 0   ]];then i=$LM;fi
           if [[ $i -gt $LM ]];then i=0;fi;}
REFRESH(){ after=$((i+1)); before=$((i-1))
           if [[ $before -lt 0  ]];then before=$LM;fi
           if [[ $after -gt $LM ]];then after=0;fi
           if [[ $j -lt $i      ]];then UNMARK;M$before;else UNMARK;M$after;fi
           if [[ $after -eq 0 ]] || [ $before -eq $LM ];then
           UNMARK; M$before; M$after;fi;j=$i;UNMARK;M$before;M$after;}
   INIT(){ R;HEAD;FOOT;MENU;}
     SC(){ REFRESH;MARK;$S;$b;cur=`ARROW`;}
# Функция возвращения в меню
     ES(){ MARK;$e " ENTER = main menu ";$b;read;INIT;};INIT
  while [[ "$O" != " " ]]; do case $i in
# Здесь необходимо следить за двумя перепенными 0) и S=M0 Они должны совпадать между собой и переменной списка M0().
        0) S=M0 ;SC;if [[ $cur == enter ]];then R;echo "
 Cлеш, корневой каталог
";ES;fi;;
        1) S=M1 ;SC;if [[ $cur == enter ]];then R;echo "
 Cодержит стандартные утилиты Linux.
 Или по другому этот каталог содержит основные исполняемые файлы (в Windows такие файлы имеют расширение .exe),
 доступные всем пользователям, а также содержит символьные ссылки на исполняемые файлы.
 Символьная ссылка это специальный файл в файловой системе,
 внутри которого есть только одна-две строки с указанием полного пути,
 который должен быть открыт при попытке обратиться к данной ссылке (файлу).
";ES;fi;;
        2) S=M2 ;SC;if [[ $cur == enter ]];then R;echo "
 Cодержит конфигурационные файлы загрузчика GRUB, образы ядра (по умолчанию хранятся последние три), файлы Initrd.
 Чтобы было понятно, что это за такие мифические файлы Initrd, немного внесем ясность.
 Когда начинается начальная загрузка системы, сначала монтируется временный виртуальный диск,
 который содержит временную корневую файловую систему, с помощью которой, в свою очередь, осуществляется запуск ядра Linux.
 Файл Initrd - образ этой временной корневой системы, который хранится на загрузочном устройстве.
";ES;fi;;
        3) S=M3 ;SC;if [[ $cur == enter ]];then R;echo "
 Cодержит файлы устройств. В Linux устройством называется оборудование, которое подключается к системе в процессе загрузки ядра
 или в процессе работы системы. Эти устройства представляют методы для ввода или вывода информации.
 Например, жесткий диск – устройство для ввода (запись) и вывода (чтение), мышь – устройство ввода.
 Каждое движение или нажатие на кнопки мыши отправляет символ на устройство /dev/mouse, клавиатура – тоже устройство ввода.
 Большинство устройств в Linux представляют из себя файлы в особой файловой системе (исключение составляют сетевые карты).
 И вот эти файлы хранятся в каталоге /dev, куда к ним обращается система для выполнения задач, связанных с вводом/выводом.
";ES;fi;;
        4) S=M4 ;SC;if [[ $cur == enter ]];then R;echo "
 Cодержит конфигурационные файлы операционной системы и всех сетевых служб.
 Данный каталог можно сравнить с реестром Windows, но в Windows общесистемные настройки хранятся в одном большом бинарном файле,
 а в Linux - в разных конфигурационных файлах, которые можно редактировать обычным текстовым редактором.
";ES;fi;;
        5) S=M5 ;SC;if [[ $cur == enter ]];then R;echo "
 название каталога говорит само за себя. Здесь содержатся домашние каталоги всех пользователей,
 которые зарегистрированы в системе. В домашних каталогах пользователей хранятся пользовательские файлы,
 а также пользовательские настройки различных программ.
 Каждый пользователь имеет свой уникальный и неповторимый каталог для своих личных, персональных файлов.
 Этот каталог называется Домашним каталогом пользователя и обозначается, как мы уже говорили немного ранее,
 /home/Имя_Пользователя. Такое разделение пользовательских каталогов и файлов операционной системы
 упрощает сохранение данных и повышает надежность самой операционной системы.
";ES;fi;;
        6) S=M6 ;SC;if [[ $cur == enter ]];then R;echo "
 здесь находятся различные библиотеки и модули ядра.
 В процессе установки различных программ в Linux (в том числе и драйверов) устанавливаются зависимости
 для корректной работы программы.
 Вот эти зависимости в большинстве случаев и есть библиотеки – набор собранных особым образом файлов,
 которые подключаются во время установки к устанавливаемой программе.
";ES;fi;;
        7) S=M7 ;SC;if [[ $cur == enter ]];then R;echo "
 этот каталог нужен для хранения испорченных файлов при проблемах с файловой системой,
 которые были восстановлены после, например, некорректного размонтирования файловой системы.
 Это очень ценный каталог, удалить его не получится (он всё равно снова появится).
";ES;fi;;
        8) S=M8 ;SC;if [[ $cur == enter ]];then R;echo "
 Mожет содержать все что угодно.
";ES;fi;;
        9) S=M9 ;SC;if [[ $cur == enter ]];then R;echo "
 Oбычно в этих каталогах содержатся точки монтирования.
 В современных дистрибутивах Linux этот процесс обычно происходит автоматически.
 При этом в каталогах /mnt или /media создается подкаталог, имя которого совпадает с именем монтируемого тома.
";ES;fi;;
       10) S=M10;SC;if [[ $cur == enter ]];then R;echo "
 здесь обычно размещаются установленные программы, имеющие большой дисковый объем,
 или вспомогательные пакеты, например.
";ES;fi;;
       11) S=M11;SC;if [[ $cur == enter ]];then R;echo "
 это не совсем обычный каталог, это каталог псевдофайловой системы procfs,
 которая используется для предоставления информации о процессах (по-другому это виртуальная файловая система,
 которая обеспечивает связь с ядром и монтируется в каталогу /proc).
 в системе Linux присутствует виртуальный файловый объект, именуемый каталогом /proc.
 Он существует только во время работы системы в оперативной памяти компьютера.
 Каталог представляет интерес и с точки зрения безопасности.
 Многие из утилит, выводящие информацию о системе (например, команда ps),
 берут свои исходные данные именно из этого каталога.
";ES;fi;;
       12) S=M12;SC;if [[ $cur == enter ]];then R;echo "
 Kаталог пользователя root.
";ES;fi;;
       13) S=M13;SC;if [[ $cur == enter ]];then R;echo "
 это совершенно новый каталог, который появился совсем недавно.
 И создан он (по задумке разработчиков) для хранения данных, которые были запущены приложениями,
 требующимися в процессе работы (это могут быть и службы, запускаемые самой системой,
 и программы, которые Вы запускаете сами).
 Сюда входят:
 Идентификаторы процессов PID (каждый запущенный в среде Linux процесс имеет свой уникальный идентификатор
 – по-другому это адрес (в числовом виде) процесса, с которым будут взаимодействовать другие запущенные процессы во время работы);
 Информация о межпроцессорном взаимодействии (проще говоря, это обмен данными между запущенными процессами);
 Заблокированные файлы (если в процессе работы приложение или не запускается,
 или работает нестабильно? это может означать, что некоторые файлы этого приложения заблокированы другими процессами
 и происходит это тогда, когда сразу несколько приложений пытаются использовать один общий ресурс);
 – ну и другие данные, необходимые во время работы.
";ES;fi;;
       14) S=M14;SC;if [[ $cur == enter ]];then R;echo "
 набор утилит для системного администрирования, содержит исполняемые файлы,
 необходимые для загрузки системы и ее восстановления в различных щекотливых ситуациях.
 Запускать эти утилиты имеет право только root.
";ES;fi;;
       15) S=M15;SC;if [[ $cur == enter ]];then R;echo "
 каталог, в котором хранятся временные файлы.
 Linux, в отличие от Windows, следит за чистотой и регулярно очищает этот каталог.
";ES;fi;;
       16) S=M16;SC;if [[ $cur == enter ]];then R;echo "
 содержит пользовательские программы, документацию, исходные коды программ и ядра.
 По размеру это один из самых больших каталогов файловой системы.
 В этот каталог устанавливаются практически все программы.
 И его (этот каталог) с большой натяжкой можно сравнить с каталогом Program Files в Windows.
";ES;fi;;
       17) S=M17;SC;if [[ $cur == enter ]];then R;echo "
 содержит файлы, которые подвергаются наиболее частому изменению.
 Например, кэши различных программ;
 файлы блокировки для недопустимости одновременного использования одной программы несколькими пользователями;
 файлы системных журналов; временные файлы (при выключении компьютера содержимое очищается);
 информация о различных программах; общая информация о состоянии системы с момента последней загрузки,
 входа в систему и т.д.; очередь печати, факсов, а также входящие почтовые ящики пользователей и т.д.
";ES;fi;;
       18) S=M18;SC;if [[ $cur == enter ]];then R;echo "
 df -h
";ES;fi;;
       19) S=M19;SC;if [[ $cur == enter ]];then R;echo "
 ls -lSr |more
";ES;fi;;
       20) S=M20;SC;if [[ $cur == enter ]];then R;echo "
 du -sh dir1
";ES;fi;;
       21) S=M21;SC;if [[ $cur == enter ]];then R;echo "
 du -sk * | sort -rn
";ES;fi;;
       22) S=M22;SC;if [[ $cur == enter ]];then R;displayingDisk;ES;fi;;
       23) S=M23;SC;if [[ $cur == enter ]];then R;exit 0;fi;;
 esac;POS;done
